{
  "fileTypes": [ "jade" ],
  "name": "Jade",
  "patterns": [
    {
      "match": "^(!!!)(\\s*[a-zA-Z0-9-_]+)?",
      "name": "comment.other.doctype.jade",
      "comment": "Doctype declaration."
    },
    {
      "begin": "^(\\s*)//-",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "comment.unbuffered.block.jade",
      "comment": "Unbuffered (jade-only) comments."
    },
    {
      "begin": "^(\\s*)//",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "string.comment.buffered.block.jade",
      "comment": "Buffered (html) comments.",
      "patterns": [
        {
          "captures": { "1": { "name": "invalid.illegal.comment.comment.block.jade" } },
          "match": "^\\s*(//)(?!-)",
          "name": "string.comment.buffered.block.jade",
          "comment": "Buffered comments inside buffered comments will generate invalid html."
        }
      ]
    },
    {
      "begin": "^(\\s*)(script)(?=[.#(\\s])",
      "beginCaptures": { "2": { "name": "entity.name.tag.script.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.script.jade",
      "comment": "Script tag with JavaScript code.",
      "patterns": [
        {
          "begin": "\\G(?=\\()",
          "end": "$",
          "name": "stuff.tag.script.jade",
          "patterns": [{ "include": "#tag_attributes" }]
        },
        {
          "begin": "\\G(?=[.#])",
          "end": "$",
          "name": "stuff.tag.script.jade",
          "patterns": [{ "include": "#complete_tag" }]
        },
        { "include": "source.js" }
      ]
    },
    {
      "begin": "^(\\s*)(style)(?=[.#(\\s])",
      "beginCaptures": { "2": { "name": "entity.name.tag.script.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.style.jade",
      "comment": "Style tag with CSS code.",
      "patterns": [
        {
          "begin": "\\G(?=\\()",
          "end": "$",
          "name": "stuff.tag.style.jade",
          "patterns": [{ "include": "#tag_attributes" }]
        },
        {
          "begin": "\\G(?=[.#])",
          "end": "$",
          "name": "stuff.tag.style.jade",
          "patterns": [{ "include": "#complete_tag" }]
        },
        { "include": "source.css" }
      ]
    },
    {
      "begin": "^(\\s*):(markdown)$",
      "beginCaptures": {
        "2": { "name": "constant.language.name.markdown.filter.jade" }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "text.markdown.filter.jade",
      "patterns": [{ "include": "text.html.markdown" }]
    },
    {
      "begin": "^(\\s*):(sass)$",
      "beginCaptures": { "2": { "name": "constant.language.name.sass.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.sass.filter.jade",
      "patterns": [{ "include": "source.sass" }]
    },
    {
      "begin": "^(\\s*):(less)$",
      "beginCaptures": { "2": { "name": "constant.language.name.less.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.less.filter.jade",
      "patterns": [{ "include": "source.less" }]
    },
    {
      "begin": "^(\\s*):(stylus)$",
      "beginCaptures": { "2": { "name": "constant.language.name.less.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.stylus.filter.jade",
      "patterns": [{ "include": "source.stylus" }]
    },
    {
      "begin": "^(\\s*):(coffeescript)$",
      "beginCaptures": { "2": { "name": "constant.language.name.coffeescript.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.coffeescript.filter.jade",
      "patterns": [{ "include": "source.coffee" }]
    },
    {
      "begin": "^(\\s*):(\\w+)$",
      "beginCaptures": { "2": { "name": "constant.language.name.generic.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "text.generic.filter.jade",
      "comment": "Generic Jade filter."
    },
    {
      "begin": "^(\\s+)(?=[a-z.#].*?\\.$)",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "text.block.dot.tag.jade",
      "patterns": [
        { "include": "#complete_tag" },
        {
          "begin": "^(?=.)",
          "end": "$",
          "name": "text.block.jade",
          "patterns": [
            { "include": "#html_entity" },
            { "include": "#interpolated_value" }
          ]
        }
      ]
    },
    {
      "begin": "^([a-z#.])(?=.*?\\.$)",
      "beginCaptures": { "1": { "name": "entity.tag.name" } },
      "end": "^(?!\\s|$)",
      "name": "text.block.dot.tag.jade",
      "patterns": [
        { "include": "#complete_tag" },
        {
          "begin": "^(?=.)",
          "end": "$",
          "name": "text.block.jade",
          "patterns": [
            { "include": "#html_entity" },
            { "include": "#interpolated_value" }
          ]
        }
      ]
    },
    {
      "begin": "^\\s*",
      "end": "$",
      "name": "tag.jade",
      "comment": "All constructs that generally span a single line starting with any number of white-spaces.",
      "patterns": [
        {
          "captures": {
            "1": { "name": "storage.type.import.include.jade" },
            "4": { "name": "variable.control.import.include.jade" }
          },
          "match": "(include|yield|append|prepend|block( (append|prepend))?)\\s+(.*)$",
          "name": "meta.first-class.jade",
          "comment": "Template blocks and includes."
        },
        {
          "begin": "((-\\s+)|(([a-zA-Z0-9_]+)\\s+=))",
          "beginCaptures": { "4": { "name": "variable.parameter.javascript.embedded.jade" } },
          "end": "$",
          "name": "javascript.embedded.jade",
          "comment": "Non-buffered executable code. Ex.:",
          "comment": "- var name = 'value';",
          "comment": "name = function() {}",
          "patterns": [{ "include": "source.js" }]
        },
        {
          "begin": "(((mixin\\s+)|\\+)([\\w-]+))\\s*",
          "beginCaptures": {
            "2": { "name": "storage.type.function.jade" },
            "4": { "name": "entity.name.function.jade" }
          },
          "end": "$",
          "name": "meta.mixin.jade",
          "comment": "Mixin declaration and use, including the new '+' syntax.",
          "patterns": [
            {
              "begin": "",
              "end": "$",
              "name": "args.mixin.jade",
              "patterns": [{ "include": "source.js" }]
            }
          ]
        },
        {
          "begin": "(for|if|else if|else|each|until|while|unless)(\\s+|$)",
          "captures": { "1": { "name": "storage.type.function.jade" } },
          "end": "$",
          "name": "meta.control.flow.jade",
          "comment": "JavaScript control flow.",
          "patterns": [
            {
              "begin": "",
              "end": "$",
              "name": "js.embedded.control.flow.jade",
              "patterns": [{ "include": "source.js" }]
            }
          ]
        },
        {
          "begin": "\\|",
          "end": "$",
          "name": "text.block.pipe.jade",
          "comment": "Tag pipe text line.",
          "patterns": [
            { "include": "#html_entity" },
            { "include": "#interpolated_value" }
          ]
        },
        { "include": "#printed_expression" },
        { "include": "#complete_tag" }
      ]
    }
  ],
  "repository": {
    "complete_tag": {
      "begin": "(?=[\\w.#])",
      "end": "(?!:\\s+)$",
      "name": "complete_tag.jade",
      "patterns": [
        { "include": "#tag_name" },
        { "include": "#tag_id" },
        { "include": "#tag_classes" },
        { "include": "#tag_attributes" },
        {
          "match": "(\\.(?!$))|(:\\s*$)",
          "name": "invalid.illegal.end.tag.jade"
        },
        {
          "begin": ":\\s+",
          "end": "(?!:)$",
          "name": "subtag.complete_tag.jade",
          "patterns": [{ "include": "#complete_tag" }]
        },
        { "include": "#printed_expression" },
        { "include": "#tag_text" }
      ]
    },
    "html_entity": {
      "patterns": [
        {
          "match": "&(?!((#\\d+)|([a-z]\\w+));)",
          "name": "invalid.illegal.html_entity.text.jade"
        },
        {
          "match": "&((#\\d+)|([a-z]\\w+));",
          "name": "constant.html_entity.text.jade"
        }
      ]
    },
    "interpolated_value": {
      "begin": "(?<!\\\\)[#!]\\{(?=.*?\\})",
      "end": "\\}",
      "name": "string.interpolated.jade",
      "patterns": [
        {
          "match": "{",
          "name": "invalid.illegal.tag.jade"
        },
        { "include": "source.js" }
      ]
    },
    "printed_expression": {
      "begin": "(!?\\=)\\s*",
      "captures": { "1": { "name": "constant" } },
      "end": "$",
      "patterns": [{ "include": "source.js" }]
    },
    "string": {
      "begin": "(['\"])",
      "end": "(?<!\\\\)\\1",
      "name": "string.quoted.jade",
      "patterns": [{ "include": "#interpolated_value" }]
    },
    "tag_attributes": {
      "begin": "(\\()",
      "captures": { "1": { "name": "constant.name.attribute.tag.jade" } },
      "end": "(\\))",
      "name": "attibutes.tag.jade",
      "patterns": [
        {
          "match": "([^\\s(),=]+)\\s*((?=\\))|,|$)",
          "captures": { "1": { "name": "entity.other.attribute-name.tag.jade" } },
          "name": "attribues.tag.jade"
        },
        {
          "begin": "([^\\s(),=]+)(=)",
          "beginCaptures": {
            "1": { "name": "entity.other.attribute-name.tag.jade" },
            "2": { "name": "punctuation.separator.key-value.jade" }
          },
          "end": "((?=\\))|,|$)",
          "name": "attributes.tag.jade",
          "patterns": [
            { "include": "#tag_attribute_value_paren" },
            { "include": "#tag_attribute_value_brackets" },
            { "include": "#tag_attribute_value_braces" },
            { "include": "#string" },
            { "include": "source.js" }
          ]
        }
      ]
    },
    "tag_attribute_value_paren": {
      "begin": "\\(",
      "end": "\\)",
      "name": "js.value.attribute.tag.jade",
      "patterns": [
        { "include": "#tag_attribute_value_paren" },
        { "include": "#tag_attribute_value_brackets" },
        { "include": "#tag_attribute_value_braces" },
        { "include": "#string" },
        { "include": "source.js" }
      ]
    },
    "tag_attribute_value_brackets": {
      "begin": "\\[",
      "end": "\\]",
      "name": "js.value.attribute.tag.jade",
      "patterns": [
        { "include": "#tag_attribute_value_paren" },
        { "include": "#tag_attribute_value_brackets" },
        { "include": "#tag_attribute_value_braces" },
        { "include": "#string" },
        { "include": "source.js" }
      ]
    },
    "tag_attribute_value_braces": {
      "begin": "\\{",
      "end": "\\}",
      "name": "js.value.attribute.tag.jade",
      "patterns": [
        { "include": "#tag_attribute_value_paren" },
        { "include": "#tag_attribute_value_brackets" },
        { "include": "#tag_attribute_value_braces" },
        { "include": "#string" },
        { "include": "source.js" }
      ]
    },
    "tag_classes": {
      "captures": { "1": { "name": "string.name.classes.tag.jade" } },
      "match": "\\.([\\w-]+)",
      "name": "classes.tag.jade"
    },
    "tag_id": {
      "match": "#([a-z][\\w-]*)",
      "name": "constant.id.tag.jade"
    },
    "tag_name": {
      "match": "[\\w](([\\w:-]+[\\w-])|([\\w-]*))",
      "name": "entity.name.tag.jade"
    },
    "tag_text": {
      "begin": "(?=.)",
      "end": "$",
      "name": "text.jade",
      "patterns": [
        { "include": "#html_entity" },
        { "include": "#interpolated_value" }
      ]
    }
  },
  "scopeName": "source.jade",
  "uuid": "eee6ba25-6ac2-4f7e-9c70-cddf2bd3448b"
}